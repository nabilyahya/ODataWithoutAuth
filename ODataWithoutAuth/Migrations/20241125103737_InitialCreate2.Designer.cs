// <auto-generated />
using System;
using AirVinyl.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ODataWithoutAuth.Migrations
{
    [DbContext(typeof(AirVinylDbContext))]
    [Migration("20241125103737_InitialCreate2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirVinyl.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<decimal>("AmountOfCashToSpend")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("NumberOfRecordsOnWishList")
                        .HasColumnType("integer");

                    b.HasKey("PersonId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            AmountOfCashToSpend = 300m,
                            DateOfBirth = new DateTimeOffset(new DateTime(1981, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "kevin@kevindockx.com",
                            FirstName = "Kevin",
                            Gender = 1,
                            LastName = "Dockx",
                            NumberOfRecordsOnWishList = 10
                        },
                        new
                        {
                            PersonId = 2,
                            AmountOfCashToSpend = 2000m,
                            DateOfBirth = new DateTimeOffset(new DateTime(1986, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "sven@someemailprovider.com",
                            FirstName = "Sven",
                            Gender = 1,
                            LastName = "Vercauteren",
                            NumberOfRecordsOnWishList = 34
                        },
                        new
                        {
                            PersonId = 3,
                            AmountOfCashToSpend = 100m,
                            DateOfBirth = new DateTimeOffset(new DateTime(1977, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Email = "nele@someemailprovider.com",
                            FirstName = "Nele",
                            Gender = 0,
                            LastName = "Verheyen",
                            NumberOfRecordsOnWishList = 120
                        },
                        new
                        {
                            PersonId = 4,
                            AmountOfCashToSpend = 2500m,
                            DateOfBirth = new DateTimeOffset(new DateTime(1983, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "nils@someemailprovider.com",
                            FirstName = "Nils",
                            Gender = 1,
                            LastName = "Missorten",
                            NumberOfRecordsOnWishList = 23
                        },
                        new
                        {
                            PersonId = 5,
                            AmountOfCashToSpend = 90m,
                            DateOfBirth = new DateTimeOffset(new DateTime(1981, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "tim@someemailprovider.com",
                            FirstName = "Tim",
                            Gender = 1,
                            LastName = "Van den Broeck",
                            NumberOfRecordsOnWishList = 19
                        },
                        new
                        {
                            PersonId = 6,
                            AmountOfCashToSpend = 200m,
                            DateOfBirth = new DateTimeOffset(new DateTime(1981, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Kenneth",
                            Gender = 1,
                            LastName = "Mills",
                            NumberOfRecordsOnWishList = 98
                        });
                });

            modelBuilder.Entity("AirVinyl.Entities.PressingDetail", b =>
                {
                    b.Property<int>("PressingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PressingDetailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Grams")
                        .HasColumnType("integer");

                    b.Property<int>("Inches")
                        .HasColumnType("integer");

                    b.HasKey("PressingDetailId");

                    b.ToTable("PressingDetails");

                    b.HasData(
                        new
                        {
                            PressingDetailId = 1,
                            Description = "Audiophile LP",
                            Grams = 180,
                            Inches = 12
                        },
                        new
                        {
                            PressingDetailId = 2,
                            Description = "Regular LP",
                            Grams = 140,
                            Inches = 12
                        },
                        new
                        {
                            PressingDetailId = 3,
                            Description = "Audiophile Single",
                            Grams = 50,
                            Inches = 7
                        },
                        new
                        {
                            PressingDetailId = 4,
                            Description = "Regular Single",
                            Grams = 40,
                            Inches = 7
                        });
                });

            modelBuilder.Entity("AirVinyl.Entities.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RatingId"));

                    b.Property<int>("RatedByPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStoreId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("RatingId");

                    b.HasIndex("RatedByPersonId");

                    b.HasIndex("RecordStoreId");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            RatingId = 1,
                            RatedByPersonId = 1,
                            RecordStoreId = 1,
                            Value = 4
                        },
                        new
                        {
                            RatingId = 2,
                            RatedByPersonId = 2,
                            RecordStoreId = 1,
                            Value = 4
                        },
                        new
                        {
                            RatingId = 3,
                            RatedByPersonId = 3,
                            RecordStoreId = 1,
                            Value = 4
                        },
                        new
                        {
                            RatingId = 4,
                            RatedByPersonId = 1,
                            RecordStoreId = 2,
                            Value = 5
                        },
                        new
                        {
                            RatingId = 5,
                            RatedByPersonId = 2,
                            RecordStoreId = 2,
                            Value = 4
                        },
                        new
                        {
                            RatingId = 6,
                            RatedByPersonId = 3,
                            RecordStoreId = 3,
                            Value = 5
                        },
                        new
                        {
                            RatingId = 7,
                            RatedByPersonId = 2,
                            RecordStoreId = 3,
                            Value = 4
                        });
                });

            modelBuilder.Entity("AirVinyl.Entities.RecordStore", b =>
                {
                    b.Property<int>("RecordStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecordStoreId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RecordStoreId");

                    b.ToTable("RecordStores");

                    b.HasDiscriminator().HasValue("RecordStore");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            RecordStoreId = 1,
                            Name = "All Your Music Needs",
                            Tags = "[\"Rock\",\"Pop\",\"Indie\",\"Alternative\"]"
                        });
                });

            modelBuilder.Entity("AirVinyl.Entities.VinylRecord", b =>
                {
                    b.Property<int>("VinylRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VinylRecordId"));

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CatalogNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PressingDetailId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("VinylRecordId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PressingDetailId");

                    b.ToTable("VinylRecords");

                    b.HasData(
                        new
                        {
                            VinylRecordId = 1,
                            Artist = "Nirvana",
                            CatalogNumber = "ABC/111",
                            PersonId = 1,
                            PressingDetailId = 1,
                            Title = "Nevermind",
                            Year = 1991
                        },
                        new
                        {
                            VinylRecordId = 2,
                            Artist = "Arctic Monkeys",
                            CatalogNumber = "EUI/111",
                            PersonId = 1,
                            PressingDetailId = 2,
                            Title = "AM",
                            Year = 2013
                        },
                        new
                        {
                            VinylRecordId = 3,
                            Artist = "Beatles",
                            CatalogNumber = "DEI/113",
                            PersonId = 1,
                            PressingDetailId = 2,
                            Title = "The White Album",
                            Year = 1968
                        },
                        new
                        {
                            VinylRecordId = 4,
                            Artist = "Beatles",
                            CatalogNumber = "DPI/123",
                            PersonId = 1,
                            PressingDetailId = 2,
                            Title = "Sergeant Pepper's Lonely Hearts Club Band",
                            Year = 1967
                        },
                        new
                        {
                            VinylRecordId = 5,
                            Artist = "Nirvana",
                            CatalogNumber = "DPI/123",
                            PersonId = 1,
                            PressingDetailId = 1,
                            Title = "Bleach",
                            Year = 1989
                        },
                        new
                        {
                            VinylRecordId = 6,
                            Artist = "Leonard Cohen",
                            CatalogNumber = "PPP/783",
                            PersonId = 1,
                            PressingDetailId = 3,
                            Title = "Suzanne",
                            Year = 1967
                        },
                        new
                        {
                            VinylRecordId = 7,
                            Artist = "Marvin Gaye",
                            CatalogNumber = "MVG/445",
                            PersonId = 1,
                            PressingDetailId = 1,
                            Title = "What's Going On"
                        },
                        new
                        {
                            VinylRecordId = 8,
                            Artist = "Nirvana",
                            CatalogNumber = "ABC/111",
                            PersonId = 2,
                            PressingDetailId = 1,
                            Title = "Nevermind",
                            Year = 1991
                        },
                        new
                        {
                            VinylRecordId = 9,
                            Artist = "Cher",
                            CatalogNumber = "CHE/190",
                            PersonId = 2,
                            PressingDetailId = 2,
                            Title = "Closer to the Truth",
                            Year = 2013
                        },
                        new
                        {
                            VinylRecordId = 10,
                            Artist = "The Dandy Warhols",
                            CatalogNumber = "TDW/516",
                            PersonId = 3,
                            PressingDetailId = 2,
                            Title = "Thirteen Tales From Urban Bohemia"
                        },
                        new
                        {
                            VinylRecordId = 11,
                            Artist = "Justin Bieber",
                            CatalogNumber = "OOP/098",
                            PersonId = 4,
                            PressingDetailId = 3,
                            Title = "Baby"
                        },
                        new
                        {
                            VinylRecordId = 12,
                            Artist = "The Prodigy",
                            CatalogNumber = "NBE/864",
                            PersonId = 4,
                            PressingDetailId = 2,
                            Title = "Music for the Jilted Generation"
                        },
                        new
                        {
                            VinylRecordId = 13,
                            Artist = "Anne Clarke",
                            CatalogNumber = "TII/339",
                            PersonId = 5,
                            PressingDetailId = 3,
                            Title = "Our Darkness"
                        },
                        new
                        {
                            VinylRecordId = 14,
                            Artist = "Dead Kennedys",
                            CatalogNumber = "DKE/864",
                            PersonId = 5,
                            PressingDetailId = 2,
                            Title = "Give Me Convenience or Give Me Death"
                        },
                        new
                        {
                            VinylRecordId = 15,
                            Artist = "Sisters of Mercy",
                            CatalogNumber = "IIE/824",
                            PersonId = 5,
                            PressingDetailId = 4,
                            Title = "Temple of Love"
                        },
                        new
                        {
                            VinylRecordId = 16,
                            Artist = "Abba",
                            CatalogNumber = "TDW/516",
                            PersonId = 6,
                            PressingDetailId = 4,
                            Title = "Gimme Gimme Gimme"
                        });
                });

            modelBuilder.Entity("AirVinyl.Entities.SpecializedRecordStore", b =>
                {
                    b.HasBaseType("AirVinyl.Entities.RecordStore");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("SpecializedRecordStore");

                    b.HasData(
                        new
                        {
                            RecordStoreId = 2,
                            Name = "Indie Records, Inc",
                            Tags = "[\"Rock\",\"Indie\",\"Alternative\"]",
                            Specialization = "Indie"
                        },
                        new
                        {
                            RecordStoreId = 3,
                            Name = "Rock Records, Inc",
                            Tags = "[\"Rock\",\"Pop\"]",
                            Specialization = "Rock"
                        });
                });

            modelBuilder.Entity("AirVinyl.Entities.Rating", b =>
                {
                    b.HasOne("AirVinyl.Entities.Person", "RatedBy")
                        .WithMany()
                        .HasForeignKey("RatedByPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirVinyl.Entities.RecordStore", null)
                        .WithMany("Ratings")
                        .HasForeignKey("RecordStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatedBy");
                });

            modelBuilder.Entity("AirVinyl.Entities.RecordStore", b =>
                {
                    b.OwnsOne("AirVinyl.Entities.Address", "StoreAddress", b1 =>
                        {
                            b1.Property<int>("RecordStoreId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.HasKey("RecordStoreId");

                            b1.ToTable("RecordStores");

                            b1.WithOwner()
                                .HasForeignKey("RecordStoreId");

                            b1.HasData(
                                new
                                {
                                    RecordStoreId = 2,
                                    City = "Antwerp",
                                    Country = "Belgium",
                                    PostalCode = "2000",
                                    Street = "1, Main Street"
                                },
                                new
                                {
                                    RecordStoreId = 3,
                                    City = "Antwerp",
                                    Country = "Belgium",
                                    PostalCode = "2000",
                                    Street = "5, Big Street"
                                },
                                new
                                {
                                    RecordStoreId = 1,
                                    City = "Antwerp",
                                    Country = "Belgium",
                                    PostalCode = "2000",
                                    Street = "25, Fluffy Road"
                                });
                        });

                    b.Navigation("StoreAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("AirVinyl.Entities.VinylRecord", b =>
                {
                    b.HasOne("AirVinyl.Entities.Person", "Person")
                        .WithMany("VinylRecords")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirVinyl.Entities.PressingDetail", "PressingDetail")
                        .WithMany()
                        .HasForeignKey("PressingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PressingDetail");
                });

            modelBuilder.Entity("AirVinyl.Entities.Person", b =>
                {
                    b.Navigation("VinylRecords");
                });

            modelBuilder.Entity("AirVinyl.Entities.RecordStore", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
